from statistics import mean
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import stats
from math import sqrt

ROUND_NUMBER = 2

# Задание 1
# Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
# Полученные значения должны быть равны.
# Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков,
# а затем с использованием функций из библиотек numpy и pandas.
zp = np.asarray([35., 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.asarray([401., 574, 874, 919, 459, 739, 653, 902, 746, 832])
cov_zp_ks = mean(zp*ks)-mean(zp)*mean(ks)
print(f'Задание 1.1: Расчетная ковариация: {round(cov_zp_ks,ROUND_NUMBER)}')
print(f'Задание 1.1: numpy:                {np.cov(ks,zp, ddof=0)}')

cof_cor_pearson = cov_zp_ks/(np.std(zp, ddof=0)*np.std(ks, ddof=0))
print(f'Задание 1.2: Расчетный коэф-т корреляции Пирсона: {round(cof_cor_pearson,ROUND_NUMBER)}')
print(f'Задание 1.2: numpy:                {np.corrcoef(ks,zp)}')

df = pd.DataFrame({'zp': [35., 45, 190, 200, 40, 70, 54, 150, 120, 110],
 'ks': [401., 574, 874, 919, 459, 739, 653, 902, 746, 832]})
pandas_cof_cor_pearson = df['zp'].corr(df['ks'], method='pearson')
print(f'Задание 1.2: pandas:              {round(pandas_cof_cor_pearson, ROUND_NUMBER)}')

plt.scatter(df['zp'], df['ks'])
plt.title("Задание 1")
plt.xlabel('zp')
plt.ylabel('ks')
plt.show()



# Задание 2
# Измерены значения IQ выборки студентов,
# обучающихся в местных технических вузах:
# 131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
# Известно, что в генеральной совокупности IQ распределен нормально.
# Найдите доверительный интервал для математического ожидания с надежностью 0.95.
iq = [131, 125, 115, 122, 131, 115, 107, 99, 125, 111]
iq_std = np.std(iq)
# print(f'Промежуточные данные iq_std: {round(iq_std,ROUND_NUMBER)}')
iq_mean = mean(iq)
# print(f'Промежуточные данные iq_mean: {round(iq_mean,ROUND_NUMBER)}')
z = stats.norm.ppf(1-.05/2)
# print(f'Промежуточные данные z: {round(z,ROUND_NUMBER)}')
point_1 = iq_mean - z*iq_std/sqrt(len(iq))
point_2 = iq_mean + z*iq_std/sqrt(len(iq))
print(f'Задание 2: Доверительный интервал: [{round(point_1, ROUND_NUMBER)}; {round(point_2, ROUND_NUMBER)}]')



# Задание 3
# Известно, что рост футболистов в сборной распределен нормально
# с дисперсией генеральной совокупности, равной 25 кв.см. Объем выборки равен 27,
# среднее выборочное составляет 174.2. Найдите доверительный интервал для математического
# ожидания с надежностью 0.95.
lon_mean = 174.2
lon_std = sqrt(25)
lon_n = 27
z = stats.norm.ppf(1-.05/2)
# print(f'Промежуточные данные z: {round(z,ROUND_NUMBER)}')
dot_1 = lon_mean - z*lon_std/sqrt(lon_n)
dot_2 = lon_mean + z*lon_std/sqrt(lon_n)
print(f'Задание 3: Доверительный интервал: [{round(dot_1, ROUND_NUMBER)}; {round(dot_2, ROUND_NUMBER)}]')

















# # Задание 2
# # Исследовалось влияние препарата на уровень давления пациентов. 
# # Сначала измерялось давление до приема препарата, потом через 10 минут и через 30 минут. 
# # Есть ли статистически значимые различия?  
# # 1е измерение до приема препарата: 150, 160, 165, 145, 155  
# # 2е измерение через 10 минут: 140, 155, 150, 130, 135  
# # 3е измерение через 30 минут: 130, 130, 120, 130, 125 
# test_1 = [150, 160, 165, 145, 155]
# test_2 = [140, 155, 150, 130, 135]
# test_3 = [130, 130, 120, 130, 125]
# # Будем проводить тест с помощью критерия Фридмана
# print(f'Задание 2: {stats.friedmanchisquare(test_1,test_2,test_3)}')


# # Задание 3
# # Сравните 1 и 2 е измерения, предполагая, что 3го измерения через 30 минут не было.
# # Будем проводить тест с помощью критерия Уилкоксона
# print(f'Задание 3: {stats.wilcoxon(test_1,test_2)}')


# # Задание 4
# # Даны 3 группы учеников плавания.  
# # В 1 группе время на дистанцию 50 м составляют:  
# # 56, 60, 62, 55, 71, 67, 59, 58, 64, 67  
# # Вторая группа : 57, 58, 69, 48, 72, 70, 68, 71, 50, 53  
# # Третья группа: 57, 67, 49, 48, 47, 55, 66, 51, 54  
# # Есть ли различия между группами?
# group_1 = [56, 60, 62, 55, 71, 67, 59, 58, 64, 67]
# group_2 = [57, 58, 69, 48, 72, 70, 68, 71, 50, 53]
# group_3 = [57, 67, 49, 48, 47, 55, 66, 51, 54]
# # Будем проводить тест с помощью критерия Крускала-Уоллиса
# print(f'Задание 4: {stats.kruskal(group_1,group_2,group_3)}')


# # Задание 5
# # Заявляется, что партия изготавливается со средним арифметическим 2,5 см. 
# # Проверить данную гипотезу, если известно, 
# # что размеры изделий подчинены нормальному закону распределения. 
# # Объем выборки 10, уровень статистической значимости 5%  
# # 2.51, 2.35, 2.74, 2.56, 2.40, 2.36, 2.65, 2.7, 2.67, 2.34
# x = [2.51, 2.35, 2.74, 2.56, 2.40, 2.36, 2.65, 2.7, 2.67, 2.34]
# fi = 2.5
# ROUNDING_SIZE = 3
# # вычисляем среднее арифметическое
# avg_value = 0
# for i in x:
#     avg_value += i
# else:
#     avg_value = avg_value/len(x)
# # вычисляем не смещенное стандартное отклонение
# std_value = 0
# for i in x:
#     std_value += (i - avg_value)**2
# else:
#     std_value = (std_value/(len(x)-1))**0.5
# # расчетный критерий Стьюдента
# t = (avg_value - fi)/(std_value/(len(x)**0.5))

# print(f'Задание 5: Расчетный критерий Стьюдента: {round(t,ROUNDING_SIZE)}, среднее арифметическое: {round(avg_value,ROUNDING_SIZE)}, не смещенное стандартное отклонение: {round(std_value,ROUNDING_SIZE)}')
# print(f'Проверка: {stats.ttest_1samp(x,fi)}')



